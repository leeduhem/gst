---
layout: post
title: gst 的主函数 (main.c)
categories: tools
---

[GNU Smalltalk][gst] 系统的主程序是 [`gst`][gst-invocation]，其使用在 [GNU Smalltalk 用户手册][gst-manual]的 [Command line arguments][gst-invocation] 一节描述，`main.c` 包含该程序的 `main` 函数，[GNU Smaltalk][gst] 虚拟机相关实现位于 `libgst`。

`main.c` 的功能相当简单：

* 解析命令行参数
* 初始化 [GNU Smalltalk][gst] 虚拟机
* 处理命令行参数（例如加载 [Smalltalk][smalltalk] 源码文件，或进入交互模式）
* 结束虚拟机

## 头文件包含

```C
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "gstpub.h"
#include "getopt.h"
```

`config.h` 包含配置脚本 `configure` 检测到的构建环境相关的信息。

`gstpub.h` 提供了 `libgst` 的外部接口（API）。

## 命令行参数解析

```C
void
parse_args (int argc, const char **argv)
{
  while ((ch = getopt_long (argc, (char **) argv, OPTIONS,
			    long_options, NULL)) != -1)
    {
```

`parse_args` 使用 `getopt_long` 来进行命令行解析。

```C
      switch (ch)
        {
        case 'c':
          gst_set_var (GST_MAKE_CORE_FILE, true);
          break;
```

`gst_set_var` 用来修改 [GNU Smalltalk][gst] 虚拟机内部的一些全局状态，其实现代码为 `libgst/interp.c:_gst_set_var`。

```C
          gst_smalltalk_args (argc - optind, argv + optind);
```

`gst_smalltalk_args` 用来给将要启动的 [Smalltalk][gst] 代码传递参数，可以通过 `Smalltalk arguments` 访问这些参数。

## main 函数

```C
int
main(int argc, const char **argv)
{
  loaded_files =
    (struct loaded_file *) alloca (sizeof (struct loaded_file) * argc);

    parse_args (argc, argv);
```

`main` 首先调用 `parse_args` 来解析命令行参数，解析的结果保存在全局变量中。

```C
  result = gst_initialize (kernel_dir, image_file, flags);
  if (result)
    exit (result);
```

`gst_initialize` 用来初始化 [GNU Smalltalk][gst] 虚拟机，`kernel_dir` 是 `kernel` 目录的位置，`image_file` 是 [GNU Smalltalk] image 文件的路径。

```C
  for (file = loaded_files; file < &loaded_files[n_loaded_files]; file++)
    {
      /* - by itself indicates standard input */
      if (!file->kernel_path && !strcmp (file->file_name, "-"))
        gst_process_stdin (stdin_prompt);

      else
        {
          errno = 0;
          if (!gst_process_file (file->file_name,
                                 file->kernel_path ? GST_DIR_BASE : GST_DIR_ABS))
            {
```

`loaded_files` 记录了命令行指定的每一个待加载 [Smalltalk][smalltalk] 源码文件。依次加载这些文件，若待加载文件名字为 `-` 则使用 `gst_process_stdin` 读取标准输入，否则用 `gst_process_file` 加载该文件。

```C
  if (n_loaded_files == 0)
    gst_process_stdin (stdin_prompt);
```

若是没有在命令行指定任何 [Smalltalk][smalltalk] 源码文件，则直接进入交互模式。

```C
  if (snapshot_after_load)
    gst_msg_sendf (NULL, "%v %o snapshot: %o", 
		   gst_class_name_to_oop ("ObjectMemory"),
                   gst_str_msg_send (gst_class_name_to_oop ("File"),
				     "image", NULL));
```

若是在命令行指定了 `-S` 选项，则在退出时保存新的 [GNU Smalltalk][gst] image 文件。上述 `gst_msg_sendf` 调用相当于 `ObjectMemory snapshot: (File image)`。

```C
  gst_invoke_hook (GST_ABOUT_TO_QUIT);
```
      
`gst_invoke_hook` 用来调用预定义的一些 hook。上如调用相当于 `ObjectMemory changed: #aboutToQuit`。

[links]: <> (Link list)

{% include Links.markdown %}
